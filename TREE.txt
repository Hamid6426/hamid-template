# YARN WORKSPACE WITH DOCKER 

YARN WORKSPACE WITH DOCKER SUMMARY NOTES
## Overview
- This setup utilizes Yarn Workspaces to manage a monorepo with separate packages for frontend, backend, database and shared code. 
- Docker is used for containerization, ensuring consistent development and production environments.

## Key Features
- Yarn Workspaces enables a single node_modules folder for all dependencies.
- Separate packages for frontend, backend, database, and shared code promote modularity and reusability.
- Docker provides a consistent environment across development, staging, and production.

## Directory Structure
- docker/: Contains Docker-related files, including docker-compose files and Dockerfiles for different environments.
- packages/: Holds the separate packages for frontend, backend, database and shared code.
- yarn.lock and package.json: Manage dependencies and scripts for the entire project.
- .gitignore: Ignore important files

## Environment-Specific Configurations
- docker-compose.dev.yml, docker-compose.staging.yml, and docker-compose.prod.yml: Define environment-specific configurations for Docker containers.
- .env.dev, .env.staging, and .env.prod: Store environment variables for each environment.

## Scripts and Commands
- yarn start:frontend and yarn start:backend: Start the frontend and backend development servers.
- yarn build:frontend: Build the frontend code.
- yarn copy:frontend: Copy the built frontend code to the public directory.
- yarn start: Start both the frontend and backend development servers concurrently.

## Benefits
- Simplified dependency management with Yarn Workspaces.
- Consistent environments across development, staging, and production using Docker.
- Improved modularity and reusability with separate packages for frontend, backend, and shared code.

## Why this setup
- I am learning docker container
- I am learning various architectures
- I want to host it as a single repo with easier Commands
- I want to learn vercel-postgresql and deployment on vercel

├── docker
│   ├── .dockerignore
│   ├── .env.dev
│   ├── .env.prod
│   ├── .env.staging
│   ├── compose.yml
│   ├── dev
│   │   ├── docker-compose.dev.yml
│   │   └── Dockerfile
│   ├── prod
│   │   ├── docker-compose.prod.yml
│   │   └── Dockerfile
│   └── staging
│       ├── docker-compose.staging.yml
│       └── Dockerfile
├── packages
│   ├── frontend
│   │   ├── package.json
│   │   └── src
│   │       ├── components/
│   │       ├── containers/
│   │       ├── images/
│   │       ├── index.tsx
│   │       └── styles
│   ├── backend
│   │   ├── package.json
│   │   └── src
│   │       ├── controllers/
│   │       ├── models/
│   │       ├── routes/
│   │       ├── services/
│   │       ├── index.ts
│   │       └── utils
│   ├── database
│   │   ├── package.json
│   │   └── prisma/
│   └── shared
│       ├── package.json
│       └── src
│           ├── constants/
│           ├── interfaces/
│           ├── types/
│           └── utilities/
├── yarn.lock
├── package.json
└── README.md